---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: bfstats-ui-feature
  namespace: bfstats-ui
  labels:
    app: bfstats-ui-feature
    branch: feature
    deployment-type: feature-branch
spec:
  replicas: 1
  selector:
    matchLabels:
      app: bfstats-ui-feature
  template:
    metadata:
      labels:
        app: bfstats-ui-feature
        branch: feature
        deployment-type: feature-branch
    spec:
      containers:
        - name: ui
          image: dylanmunyard/bf1942-ui:latest
          imagePullPolicy: Always
          ports:
            - containerPort: 80
          env:
            - name: BRANCH_NAME
              value: feature
          readinessProbe:
            httpGet:
              path: /
              port: 80
            initialDelaySeconds: 5
            periodSeconds: 10
          livenessProbe:
            httpGet:
              path: /
              port: 80
            initialDelaySeconds: 30
            periodSeconds: 30
          lifecycle:
            preStop:
              exec:
                command: ["/bin/sh", "-c", "sleep 15"]
---
apiVersion: v1
kind: Service
metadata:
  name: ui-service
  namespace: bfstats-ui
  labels:
    app: bfstats-ui-feature
    branch: feature
    deployment-type: feature-branch
spec:
  selector:
    app: bfstats-ui-feature
  type: ClusterIP
  ports:
    - port: 80
      targetPort: 80
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: bfstats-ui-ingress
  namespace: bfstats-ui
  labels:
    app: bfstats-ui-feature
    branch: feature
    deployment-type: feature-branch
  annotations:
    # Enable SSL redirect
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"

    # Enable CORS for UI
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-origin: "https://staging.bfstats.io"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, PUT, DELETE, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-headers: "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization"
    nginx.ingress.kubernetes.io/cors-allow-credentials: "true"

    # Request body size for large payloads
    nginx.ingress.kubernetes.io/proxy-body-size: "50m"

    # Timeout settings for long-running requests
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "300"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "300"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "300"

    # Let's Encrypt certificate issuer
    cert-manager.io/cluster-issuer: "letsencrypt-prod"

    # Higher priority than API ingress (API has default priority 0)
    nginx.ingress.kubernetes.io/priority: "100"
spec:
  ingressClassName: nginx
  tls:
    - hosts:
        - staging.bfstats.io
      secretName: bfstats-ui-tls
  rules:
    - host: staging.bfstats.io
      http:
        paths:
          # UI routes - catch all paths not handled by API
          - path: /
            pathType: Prefix
            backend:
              service:
                name: ui-service
                port:
                  number: 80
---
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: bfstats-ui-cert
  namespace: bfstats-ui
spec:
  secretName: bfstats-ui-tls
  issuerRef:
    name: letsencrypt-prod
    kind: ClusterIssuer
  dnsNames:
    - staging.bfstats.io